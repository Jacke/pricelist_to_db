cmdhistory=[";; Switching to zx.core namespace" "(-main \\"rs.xlsx\\")" "(def workbook (-main \\"rs.xlsx\\"))" ";; Switching to zx.core namespace" "(def workbook -main \\"rs.xlsx\\")" "(def workbook (-main \\"rs.xlsx\\"))" "(clojure.core.reducers/map inc (range))" "(def workbook (-main \\"rs.xlsx\\"))" "(iterator-seq (.iterator (.keySet (java.lang.System/getProperties))))" "(first (iterator-seq (.iterator (.keySet (java.lang.System/getProperties)))))" "(def workbook (-main \\"rs.xlsx\\"))" "workbook" "(def workbook (-main \\"rs.xlsx\\"))" "(count (def workbook (-main \\"rs.xlsx\\")))" "(time (def workbook (-main \\"rs.xlsx\\")))" ";; Switching to zx.core namespace" "(-main)" "(-main \\"rs.xlsx\\")" ";; Switching to zx.core namespace" "(-main \\"Sample-Person-Data.xlsx\\")" "(-main)" "(main)" "(\#'zx.core/-main)" "(\#'zx.core/-main \\"Sample-Person-Data.xlsx\\")" "listresult" "(\#'zx.core/listresult)" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))" "listresult" "(-main \\"Sample-Person-Data.xlsx\\")" "listresult" "(conj '(\:bar \:baz) \:foo)" "listresult" "(def listresult '())" "(cons 4 listresult)" "(cons 64 listresult)" "listresult" "(apply vector (cons \:foo [\:bar \:baz]))" "(apply vector (cons \:foo listresult))" "listresult" "foo" "      (dosync\\r\\n(ref-set foo (cons 4242 @foo)))" "      (dosync\\r\\n(ref-set foo (cons 6464 @foo)))" "foo" "(-main \\"Sample-Person-Data.xlsx\\")" "foo" "(\#'zx.core/-main \\"rs.xlsx\\")" "(count @foo)" "(first @foo)" "(foo {})" "(def foo (ref {}))" "(cons {42, 22} @foo)" "(cons {423, 222} @foo)" "@foo" "(cons '(42, 22) @foo)" "@foo" "(dosync\\r\\n        (ref-set foo (cons {\\"FSS\\", a} @foo)))" "(dosync\\r\\n        (ref-set foo (cons {\\"FSS\\", \:a} @foo)))" "(dosync\\r\\n        (ref-set foo (cons {\\"FdSS\\", \:b} @foo)))" "(dosync\\r\\n        (ref-set foo (cons {\\"FdSddS\\", \:c} @foo)))" "@foo" "(@foo \:c)" "(~@foo \:c)" "(@foo \:c)" "(\#@foo \:c)" "(@foo \:c)" "(@foo)" "foo" "@foo" "~@foo" "@foo" "(first @foo)" "(def foo (ref {}))" "@foo" "(dosync\\r\\n        (ref-set foo (cons \:foo, 2 @foo)))" "(dosync\\r\\n        (ref-set foo (cons (\:foo, 2) @foo)))" "@foo" "(dosync\\r\\n        (ref-set foo (cons (2, \:foo) @foo)))" "(dosync\\r\\n        (ref-set foo (cons (2, \:foo12) @foo)))" "@foo" "(def foo (ref {}))" "(dosync\\r\\n        (ref-set foo (merge {\:a 1 \:b 2 \:c 3} @foo)\\r\\n))" "(dosync\\r\\n        (ref-set foo (merge {\:a2 1 \:b1 2 \:c1 43} @foo)\\r\\n))" "@foo" "(def foo (ref {}))" "(-main \\"Sample-Person-Data.xlsx\\")" "@foo" "(@foo \\"C5\\")" "(@foo \\"C6\\")" "(@foo \\"A5\\")" "(@foo \\"B5\\")" "(-main \\"Sample-Person-Data.xlsx\\")" "(@foo)" "@foo" "(re-find \#\\"\\\\d+\\" \\"abc 123 @\#$\\")" "(re-find \#\\"\\\\d+\\" (\\"A1\\" \\"B2\\" \\"C1\\"))" "(re-find \#\\"\\\\d+\\" '(\\"A1\\" \\"B2\\" \\"C1\\"))" "(read-string \\"A1\\")" "(let [m (.getDeclaredMethod clojure.lang.LispReader\\r\\n                            \\"matchNumber\\"\\r\\n                            (into-array [String]))]\\r\\n  (.setAccessible m true)\\r\\n  (defn parse-number [s]\\r\\n    (.invoke m clojure.lang.LispReader (into-array [s]))))" "(parse-number \\"123\\")" "(parse-number \\"A1\\")" "(map \#(Float/parseFloat (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"1 2.2 3.5\\"))" "(map \#(Float/parseFloat (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 2.2 3.5\\"))" "(map \#(Float/parseFloat (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 2 3.5\\"))" "(map \#(Float/parseFloat (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 B2 3.5\\"))" "(map \#(Float/parseInteger (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 B2 3.5\\"))" "(map \#(Integer/parseInteger (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 B2 3.5\\"))" "(map \#(java.lang.Integer/parseInt (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 B2 3.5\\"))" "(map \#(java.lang.Integer/parseInt (% 0)) (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" \\"A1 B2 35\\"))" "(fetch-header \\"A1\\")" "(if (\= 1 (fetch-header \\"A1\\")) \\"FFF\\")" "(if (\= 1 (fetch-header \\"A1\\")) (println \\"fff\\"))" "(\= 1 (fetch-header \\"A1\\")" "(\= 1 (fetch-header \\"A1\\"))" "(\= (1) (fetch-header \\"A1\\"))" "(class (fetch-header \\"A1\\"))" "(\= 1 (first (fetch-header \\"A1\\")))" "(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (\= 1 (first (fetch-header callReference))) (ref-set template (merge {formattedValue} @template))) \\r\\n        (ref-set foo (ref-set foo (merge {cellReference formattedValue} @foo))))\\r\\n\\r\\n      ;(println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\"))\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      (println \\"headerFooter\\" text tagName))\\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      (println \\"\#RowNum\: \\" rowNum))\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      (println \\"\#Sheet\: \\" name))\\r\\n    (endSheet\\r\\n      [_]\\r\\n      (println \\"\#EndSheet\\"))))" "(\= 1 (first (fetch-header \\"A1\\")))" "@template" "(ref-set template (merge {\\"fff\\"} @template))" "(dosync (ref-set template (merge {\\"fff\\"} @template)))" "(dosync (ref-set template (merge {\\"fff\\", 1} @template)))" "(def template (ref '()))" "template" "(dosync (ref-set template (merge (\\"fff\\") @template)))" "(dosync (ref-set template (assoc\\n                            (\\"fff\\") @template)))" "(assoc\\r\\n                               (\\"fff\\") @template)" "(assoc\\r\\n                               (\\"fff\\") '())" "(assoc\\r\\n                               (\\"fff\\") [])" "(merge\\r\\n                               (\\"fff\\") [])" "(merge\\r\\n                               [\\"fff\\"] [])" "(merge\\r\\n                               [\\"fff\\"])" "(-main \\"Sample-Person-Data.xlsx\\")" "@template" "(merge \\"fff\\" @template)" "(assoc \\"fff\\" @template)" "(cong @template \\"fff\\")" "(conj @template \\"fff\\")" "(-main \\"Sample-Person-Data.xlsx\\")" "@template" "(def template (ref []))" "@template" "(-main \\"Sample-Person-Data.xlsx\\")" "@template" "(-main \\"rs.xlsx\\")" ";; Switching to zx.core namespace" "(-main \\"Sample-Person-Data.xlsx\\")" "@template" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@template" "(time (-main \\"rs.xlsx\\"))" "@template" ";; Switching to zx.core namespace" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@template" "(first @template)" "(first (first @template))" "(.charAt (first (first @template)) 0)" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@template" "(@template \\\\E)" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "@template" "{(fetch-rows \\"B4\\") formattedValue}" "(merge \\n  {(fetch-rows \\"B4\\") formattedValue} @foo)" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @foo)" "@template" "(fetch-rows \\"B4\\")" "(merge \\n  {(@template (.charAt \\"B4\\" 0) 422\\n   } @foo)" "(merge \\n  {(@template (.charAt \\"B4\\" 0)) 422\\n   } @foo)" "@foo" "(merge \\n  {(@template (.charAt \\"B4\\" 0)) 422\\n   } @foo)" "(merge \\n  {(@template (.charAt \\"B4\\" 0)), 422\\n   } @foo)" "(merge \\n  (@template (.charAt \\"B4\\" 0)) 422\\n   \\n  @foo)" "(merge \\n  ((@template (.charAt \\"B4\\" 0)) 422)\\n   \\n  @foo)" "(merge \\n  [(@template (.charAt \\"B4\\" 0)), 422\\n   ] @foo)" "(merge \\n  [(@template (.charAt \\"B4\\" 0)) 422\\n   ] @foo)" "(merge \\n  {(@template (.charAt \\"B4\\" 0)) 422\\n   } {})" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } {})" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @template)" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @foo)" "@foo \= {}" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @foo)" "(def foo (ref {}))" "(merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @foo)" "(dosync\\n  (ref-set foo\\n  (merge \\n  {(fetch-rows \\"B4\\") 422\\n   } @foo)))" "@foo" "(dosync\\n  (ref-set foo\\n  (merge \\n  {(fetch-rows \\"A4\\") 2422\\n   } @foo)))" "(dosync\\n  (ref-set foo\\n  (merge \\n  {(fetch-rows \\"H4\\") 12422\\n   } @foo)))" "(fetch-header \\"A1\\")" "(fetch-header \\"A2\\")" "(def foo (ref {}))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "@template" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@template" "@foo" "(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows formattedValue) cellReference} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      ;(println \\"\#EndRow\\")\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows formattedValue) cellReference} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      ;(println \\"\#EndRow\\")\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      ;(println \\"\#EndRow\\")\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@foo" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result) (def foo (ref {})))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result) (def foo (ref {}))))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result)) (def foo (ref {})))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@result" "@foo" "(merge {\\"DOB\\" \\"2/1/1985\\", \\"Height\\" \\"5,40\\", \\"Person Id\\" \\"10002\\", \\"Name\\" \\"Emily\\", \\"Email Address\\" \\"emily@example.example\\", \\"Salary\\" \\"9500\\"} {})" "(merge {\\"DOB\\" \\"2/1/1985\\", \\"Height\\" \\"5,40\\", \\"Person Id\\" \\"10002\\", \\"Name\\" \\"Emily\\", \\"Email Address\\" \\"emily@example.example\\", \\"Salary\\" \\"9500\\"} {{}})" "(merge {\\"DOB\\" \\"2/1/1985\\", \\"Height\\" \\"5,40\\", \\"Person Id\\" \\"10002\\", \\"Name\\" \\"Emily\\", \\"Email Address\\" \\"emily@example.example\\", \\"Salary\\" \\"9500\\"} {\\n                                                                                                                                           \\n                                                                                                                                           })" "{{\\"DOB\\" \\"2/1/1985\\", \\"Height\\" \\"5,40\\", \\"Person Id\\" \\"10002\\", \\"Name\\" \\"Emily\\", \\"Email Address\\" \\"emily@example.example\\", \\"Salary\\" \\"9500\\"}}" "(map {\\"DOB\\" \\"2/1/1985\\", \\"Height\\" \\"5,40\\", \\"Person Id\\" \\"10002\\", \\"Name\\" \\"Emily\\", \\"Email Address\\" \\"emily@example.example\\", \\"Salary\\" \\"9500\\"})" "(assoc {1 2} {4 3, 1 3})" "(assoc {4 3, 1 3} 1 2)" "(assoc {4 3, 1 3} 87 2)" "(map \#(hash-map % 0) (seq {1 2}))" "(map \#(hash-map % 0) (seq {1 2, 4 67}))" "(seq {1 2, 4 67})" "@result" "[@result]" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge [@foo] @result)) (def foo (ref {})))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@result" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge '(@foo) @result)) (def foo (ref {})))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@result" "(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result)) (def foo (ref {})))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result)))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo} @result)))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def num (atom 0))  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo @num} @result)) (swap\! num (+ num 1))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def numid (atom 0))  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo @numid} @result)) (swap\! numid (+ numid 1))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def numid (atom 0))  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo @numid} @result)) (swap\! numid (+ numid 1))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      ))))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n  \\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge @foo @result)))\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def itid (atom 0))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo, itid} @result))\\n        (swap\! itid (+ @itid 1))\\n        )\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@itid" "(swap\! itid (+ @itid 1))" "(swap\! itid (+ itid 1))" "(swap\! itid (+ 1))" "(swap\! itid (inc))" "(swap\! itid inc)" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def itid (atom 0))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@foo, itid} @result))\\n        (swap\! itid inc)\\n        )\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@result" "(count @result)" "(ns zx.core\\r\\n  (\:use\\r\\n   [clojure.java.io \:only [input-stream]])\\r\\n  (\:import\\r\\n   (org.xml.sax InputSource)\\r\\n   (org.xml.sax.helpers XMLReaderFactory)\\r\\n   (org.apache.poi POIXMLDocument)\\r\\n   (org.apache.poi.openxml4j.opc OPCPackage)\\r\\n   (org.apache.poi.poifs.filesystem POIFSFileSystem)\\r\\n   (org.apache.poi.hssf.eventusermodel HSSFEventFactory\\r\\n                                       HSSFListener\\r\\n                                       HSSFRequest)\\r\\n   (org.apache.poi.hssf.record Record)\\r\\n   (org.apache.poi.xssf.eventusermodel ReadOnlySharedStringsTable\\r\\n                                       XSSFReader\\r\\n                                       XSSFSheetXMLHandler\\r\\n                                       XSSFSheetXMLHandler$SheetContentsHandler)))\\r\\n\\r\\n(defn- file-type\\r\\n  [istream opt]\\r\\n  (when (.markSupported istream)\\r\\n    (cond \\r\\n     (POIFSFileSystem/hasPOIFSHeader istream) \:hssf\\r\\n     (POIXMLDocument/hasOOXMLHeader istream)  \:xssf)))\\r\\n\\r\\n\\r\\n(defn- make-hssf-listener\\r\\n  [handler]\\r\\n  (reify \\r\\n    HSSFListener\\r\\n    (processRecord\\r\\n      [_ record]\\r\\n      (println record))))\\r\\n\\r\\n\\r\\n(defmulti read-xls\\r\\n  \\"Reads Excel file\\"\\r\\n  file-type)\\r\\n\\r\\n\\r\\n;; binary Excel files (.xls)\\r\\n(defmethod read-xls \:hssf\\r\\n  [istream handler]\\r\\n  (let [events (new HSSFEventFactory)\\r\\n        request (new HSSFRequest)]\\r\\n    (.addListenerForAllRecords request (make-hssf-listener handler))\\r\\n    (.processEvents events request istream)))\\r\\n\\r\\n\\r\\n;; OOXML Excel files (.xlsx)\\r\\n(defmethod read-xls \:xssf\\r\\n  [istream handler]\\r\\n  (let [package (OPCPackage/open istream)\\r\\n        reader (new XSSFReader package)\\r\\n        styles (.getStylesTable reader)\\r\\n        strings (new ReadOnlySharedStringsTable package)\\r\\n        sheethandler (new XSSFSheetXMLHandler styles strings handler true)\\r\\n        sheets (.getSheetsData reader)]\\r\\n    (doseq [sheet (iterator-seq sheets)]\\r\\n      (.startSheet handler (.getSheetName sheets))\\r\\n      (doto (XMLReaderFactory/createXMLReader)\\r\\n        (.setContentHandler sheethandler)\\r\\n        (.parse (new InputSource sheet)))\\r\\n      (.endSheet handler))))\\r\\n\\r\\n\\r\\n(defprotocol SheetListener\\r\\n  (startSheet [this name])\\r\\n  (endSheet [this]))\\r\\n\\n(def template (ref {}))\\r\\n(def foo (ref {}))\\n(def result (ref {}))\\n(def itid (atom 0))\\n\\n(defn fetch-header [cellref]\\n(\= 1 (first (map \#(java.lang.Integer/parseInt (% 0)) \\n     (re-seq \#\\"\\\\d+(\\\\.\\\\d+)?\\" cellref)))))\\n; [\\"Person Id\\" \\"Name\\" \\"Height\\" \\"Email Address\\" \\"DOB\\"]\\n; [\\"A*\\"        \\"B*\\"   \\"C*\\"     \\"D*\\"            \\"E*\\" ]\\n\\n(defn fetch-rows [cellref]\\n  (@template (.charAt cellref 0))\\n)\\n\\n; Return a header\\n\\r\\n(def myhandler\\r\\n  (reify\\r\\n    XSSFSheetXMLHandler$SheetContentsHandler\\r\\n    (cell\\r\\n      [_ cellReference formattedValue]\\n      (dosync\\n        (if (fetch-header cellReference) \\n          ;(ref-set template (conj @template formattedValue))\\n          (ref-set template (merge {(.charAt cellReference 0) formattedValue} @template))\\n        \\r\\n          (ref-set foo (merge {(fetch-rows cellReference) formattedValue} @foo))))\\r\\n\\r\\n      (println \\"\#CellValue\: \\" formattedValue)\\n      )\\r\\n    (endRow\\r\\n      [_]\\r\\n      (println \\"\#EndRow\\")\\n      (dosync (ref-set result (merge {@itid, @foo} @result))\\n        (swap\! itid inc)\\n        )\\n      )\\r\\n    (headerFooter\\r\\n      [_ text isHeader tagName]\\r\\n      ;(println \\"headerFooter\\" text tagName)\\n      )\\n    \\r\\n    (startRow\\r\\n      [_ rowNum]\\n      (def foo (ref {}))\\r\\n      ;(println \\"\#RowNum\: \\" rowNum)\\n      )\\r\\n    SheetListener\\r\\n    (startSheet\\r\\n      [_ name]\\r\\n      ;(println \\"\#Sheet\: \\" name)\\n      )\\r\\n    (endSheet\\r\\n      [_]\\r\\n      ;(println \\"\#EndSheet\\")\\n      )))\\r\\n\\r\\n\\r\\n(defn -main\\r\\n  [fname]\\r\\n  (with-open [istream (input-stream fname)]\\r\\n    (read-xls istream myhandler)))" "(time (-main \\"Sample-Person-Data.xlsx\\"))" "@result" "(time (-main \\"rs.xlsx\\"))" "(count @result)" "(first\\n  @result)" "(take 2\\n  @result)" "@template" "(take 2\\n  @result)" ";; Switching to zx.core namespace" "clojure.core.reducers/map inc (range)" " (doseq [i (range 10)]\\r\\n    (go\\r\\n      (Thread/sleep (rand-int 1000))\\r\\n      (println i)))" "@template" " (doseq [i (range 10)]\\r\\n    (go\\r\\n      (Thread/sleep (rand-int 1000))\\r\\n      (println i)))" "(thread\\r\\n        (reduce (fn [r v] (>\!\! c (encode-nil v))) nil (1, 2, 3))\\r\\n        (close\! c))\\r\\n       (take-while (complement nil?) (repeatedly \#(decode-nil (<\!\! c))))" "(defn lazy-seq*\\r\\n     [reducible]\\r\\n     (let [c (chan)\\r\\n           NIL (Object.)\\r\\n           encode-nil \#(if (nil? %) NIL %)\\r\\n           decode-nil \#(if (identical? NIL %) nil %)]\\r\\n       (thread\\r\\n        (reduce (fn [r v] (>\!\! c (encode-nil v))) nil reducible)\\r\\n        (close\! c))\\r\\n       (take-while (complement nil?) (repeatedly \#(decode-nil (<\!\! c))))))" "(lazy-seq* (clojure.core.reducers/map inc (range)))" "(lazy-seq* ((map [1 2 3 4]) inc (range)))" " (doseq [i (range 10)]\\r\\n    (go\\r\\n      (Thread/sleep (rand-int 1000))\\r\\n      (println i)))" " (doseq [i (range 100000)]\\r\\n    (go\\r\\n      (Thread/sleep (rand-int 1000))\\r\\n      (println i)))" "(exit)" "monitor-exit" "exit" ";; Switching to zx.core namespace" "(time (-main \\"rs.xlsx\\"))" "(/ 186718 100)" "(\\\\ 186718 100)" "(/ 186718 100)" "(unchecked-divide-int 186718 100)" "(unchecked-divide-int 1867 60)" "(count @result)" "(first @result)" "(take 2 @result)" "(take 2 @result \\"NAIMEN\\")" "(take 2 (@result \\"NAIMEN\\"))" "(take 2 \\n      @result)" "((take 2 @result) \\"NAIMEN\\")" "(class (take 2 @result))" "(class @result)" "@template" "_" "(fn [t] (+ _ t))" "(fn [1] (+ _ 1))" "@template" "(def template_header {\\"\u0417\u0430\u043A\u0430\u0437 \u0448\u0442\\" \\"count\\", \\"ONPP\\" \\"onpp\\", \\"\u0410\u0432\u0442\u043E\u0440\\" \\"author\\", \\"\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\\" \\"title\\", \\"\u0421\u0442\u0434\\" \\"std\\", \\"\u0426\u0435\u043D\u0430 \u041E\u043F\u0442.\u0433\u0440\u043D\\" \\"price\\", \\"\u0418\u0437\u0434\u0430\u0442\u0435\u043B\u044C\u0441\u0442\u0432\u043E\\" \\"publisher\\", \\"\u041F\u0435\u0440.\\" \\"translate\\", \\"\u0413\u043E\u0434\\" \\"year\\", \\"\u0416\u0430\u043D\u0440\\" \\"genre\\", \\"\u0421\u0435\u0440\u0438\u044F\\" \\"series\\", \\"\u0424\u043E\u0440\u043C\u0430\u0442\\" \\"format\\", \\"ISBN\\" \\"isbn\\", \\"\u0421\u0442\u0440.\\" \\"pages\\", \\"TOV_KOD\\" \\"article\\", \\"\u0441 \u041D\u0414\u0421,\u0431\u0435\u0437 \u041D\u0414\u0421\\" \\"pricetax\\", \\"EAN\\" \\"ean\\", \\"\u041A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\\" \\"category\\", \\"NAIMEN\\" \\"header\\"})" "(@template (.charAt \\"C6\\" 0))" "(@template (.charAt \\"C6\\" 0))\\n_" "(@template (.charAt \\"C6\\" 0))\\n(println _)" "(template_header (@template (.charAt \\"C6\\" 0)))" "(fetch-header \\"C6\\")" "(fetch-row \\"C6\\")" "(fetch-rows \\"C6\\")" "(time (-main \\"rs.xlsx\\"))" "(@template)" "@template" "(take 2 @result)" "(take 2 (sort-by @result))" "(take 2 (sort @result))" "(last (take 2 (sort @result)))" "((last (take 2 (sort @result))) \\"title\\")" "(first (last (take 2 (sort @result))))" "(last (last (take 2 (sort @result))))" "((last (last (take 2 (sort @result)))) \\"title\\")"]
eclipse.preferences.version=1
